{"version":3,"names":["RefresherContent","prototype","componentWillLoad","this","pullingIcon","undefined","mode","getIonMode","overflowRefresher","el","style","webkitOverflowScrolling","arrowDown","config","get","isPlatform","refreshingSpinner","render","hasSpinner","SPINNERS","h","Host","class","name","paused","icon","caretBackSharp","lazy","pullingText","innerHTML","sanitizeDOMString","refreshingText"],"sources":["node_modules/@ionic/core/dist/collection/components/refresher-content/refresher-content.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { arrowDown, caretBackSharp } from 'ionicons/icons';\nimport { config } from '../../global/config';\nimport { getIonMode } from '../../global/ionic-global';\nimport { isPlatform } from '../../utils/platform';\nimport { sanitizeDOMString } from '../../utils/sanitization';\nimport { SPINNERS } from '../spinner/spinner-configs';\nexport class RefresherContent {\n  componentWillLoad() {\n    if (this.pullingIcon === undefined) {\n      const mode = getIonMode(this);\n      const overflowRefresher = this.el.style.webkitOverflowScrolling !== undefined ? 'lines' : arrowDown;\n      this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && isPlatform('mobile') ? config.get('spinner', overflowRefresher) : 'circular');\n    }\n    if (this.refreshingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\n    }\n  }\n  render() {\n    const pullingIcon = this.pullingIcon;\n    const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n    const mode = getIonMode(this);\n    return (h(Host, { class: mode }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon && hasSpinner && (h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"div\", { class: \"spinner-arrow-container\" }, h(\"ion-spinner\", { name: this.pullingIcon, paused: true }), mode === 'md' && this.pullingIcon === 'circular' && (h(\"div\", { class: \"arrow-container\" }, h(\"ion-icon\", { icon: caretBackSharp })))))), this.pullingIcon && !hasSpinner && (h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false }))), this.pullingText !== undefined && (h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(this.pullingText) }))), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner && (h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner }))), this.refreshingText !== undefined && (h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(this.refreshingText) })))));\n  }\n  static get is() { return \"ion-refresher-content\"; }\n  static get properties() {\n    return {\n      \"pullingIcon\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"SpinnerTypes | string | null\",\n          \"resolved\": \"null | string | undefined\",\n          \"references\": {\n            \"SpinnerTypes\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A static icon or a spinner to display when you begin to pull down.\\nA spinner name can be provided to gradually show tick marks\\nwhen pulling down on iOS devices.\"\n        },\n        \"attribute\": \"pulling-icon\",\n        \"reflect\": false\n      },\n      \"pullingText\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | IonicSafeString\",\n          \"resolved\": \"IonicSafeString | string | undefined\",\n          \"references\": {\n            \"IonicSafeString\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/sanitization\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The text you want to display when you begin to pull down.\\n`pullingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\"\n        },\n        \"attribute\": \"pulling-text\",\n        \"reflect\": false\n      },\n      \"refreshingSpinner\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"SpinnerTypes | null\",\n          \"resolved\": \"\\\"bubbles\\\" | \\\"circles\\\" | \\\"circular\\\" | \\\"crescent\\\" | \\\"dots\\\" | \\\"lines\\\" | \\\"lines-sharp\\\" | \\\"lines-sharp-small\\\" | \\\"lines-small\\\" | null | undefined\",\n          \"references\": {\n            \"SpinnerTypes\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An animated SVG spinner that shows when refreshing begins\"\n        },\n        \"attribute\": \"refreshing-spinner\",\n        \"reflect\": false\n      },\n      \"refreshingText\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | IonicSafeString\",\n          \"resolved\": \"IonicSafeString | string | undefined\",\n          \"references\": {\n            \"IonicSafeString\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/sanitization\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The text you want to display when performing a refresh.\\n`refreshingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\"\n        },\n        \"attribute\": \"refreshing-text\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\n"],"mappings":"gWAUaA,iBAAgB,W,uCAC3BA,EAAAC,UAAAC,kBAAA,WACE,GAAIC,KAAKC,cAAgBC,UAAW,CAClC,IAAMC,EAAOC,WAAWJ,MACxB,IAAMK,EAAoBL,KAAKM,GAAGC,MAAMC,0BAA4BN,UAAY,QAAUO,UAC1FT,KAAKC,YAAcS,OAAOC,IAAI,iBAAkBR,IAAS,OAASS,WAAW,UAAYF,OAAOC,IAAI,UAAWN,GAAqB,W,CAEtI,GAAIL,KAAKa,oBAAsBX,UAAW,CACxC,IAAMC,EAAOC,WAAWJ,MACxBA,KAAKa,kBAAoBH,OAAOC,IAAI,oBAAqBD,OAAOC,IAAI,UAAWR,IAAS,MAAQ,QAAU,Y,GAG9GN,EAAAC,UAAAgB,OAAA,WACE,IAAMb,EAAcD,KAAKC,YACzB,IAAMc,EAAad,GAAe,MAAQe,SAASf,KAAiBC,UACpE,IAAMC,EAAOC,WAAWJ,MACxB,OAAQiB,EAAEC,KAAM,CAAEC,MAAOhB,GAAQc,EAAE,MAAO,CAAEE,MAAO,qBAAuBnB,KAAKC,aAAec,GAAeE,EAAE,MAAO,CAAEE,MAAO,0BAA4BF,EAAE,MAAO,CAAEE,MAAO,2BAA6BF,EAAE,cAAe,CAAEG,KAAMpB,KAAKC,YAAaoB,OAAQ,OAASlB,IAAS,MAAQH,KAAKC,cAAgB,YAAegB,EAAE,MAAO,CAAEE,MAAO,mBAAqBF,EAAE,WAAY,CAAEK,KAAMC,oBAAwBvB,KAAKC,cAAgBc,GAAeE,EAAE,MAAO,CAAEE,MAAO,0BAA4BF,EAAE,WAAY,CAAEK,KAAMtB,KAAKC,YAAauB,KAAM,SAAYxB,KAAKyB,cAAgBvB,WAAce,EAAE,MAAO,CAAEE,MAAO,yBAA0BO,UAAWC,kBAAkB3B,KAAKyB,gBAAmBR,EAAE,MAAO,CAAEE,MAAO,wBAA0BnB,KAAKa,mBAAsBI,EAAE,MAAO,CAAEE,MAAO,6BAA+BF,EAAE,cAAe,CAAEG,KAAMpB,KAAKa,qBAAwBb,KAAK4B,iBAAmB1B,WAAce,EAAE,MAAO,CAAEE,MAAO,4BAA6BO,UAAWC,kBAAkB3B,KAAK4B,mB,gIAhB56B,U"}