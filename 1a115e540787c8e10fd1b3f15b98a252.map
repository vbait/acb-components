{"version":3,"names":["selectOptionCss","SelectOption","hostRef","this","inputId","concat","selectOptionIds","disabled","prototype","render","h","Host","role","id","class","getIonMode"],"sources":["node_modules/@ionic/core/dist/collection/components/select-option/select-option.css?tag=ion-select-option&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/select-option/select-option.js"],"sourcesContent":[":host {\n  display: none;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nexport class SelectOption {\n  constructor() {\n    this.inputId = `ion-selopt-${selectOptionIds++}`;\n    /**\n     * If `true`, the user cannot interact with the select option. This property does not apply when `interface=\"action-sheet\"` as `ion-action-sheet` does not allow for disabled buttons.\n     */\n    this.disabled = false;\n  }\n  render() {\n    return h(Host, { role: \"option\", id: this.inputId, class: getIonMode(this) });\n  }\n  static get is() { return \"ion-select-option\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"select-option.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"select-option.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot interact with the select option. This property does not apply when `interface=\\\"action-sheet\\\"` as `ion-action-sheet` does not allow for disabled buttons.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"value\": {\n        \"type\": \"any\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"any | null\",\n          \"resolved\": \"any\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The text value of the option.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\nlet selectOptionIds = 0;\n"],"mappings":"2IAAA,IAAMA,gBAAkB,sB,ICKXC,aAAY,WACvB,SAAAA,EAAAC,G,yBACEC,KAAKC,QAAU,cAAAC,OAAcC,mBAI7BH,KAAKI,SAAW,K,CAElBN,EAAAO,UAAAC,OAAA,WACE,OAAOC,EAAEC,KAAM,CAAEC,KAAM,SAAUC,GAAIV,KAAKC,QAASU,MAAOC,WAAWZ,O,gIAThD,GAgEzB,IAAIG,gBAAkB,E"}