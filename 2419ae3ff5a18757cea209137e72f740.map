{"version":3,"names":["ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","ROUTER_INTENT_BACK","generatePath","segments","path","filter","s","length","join","generateUrl","useHash","queryString","url","undefined","writeSegments","history","root","direction","state","__spreadArray","parsePath","pushState","replaceState","chainToSegments","chain","_i","chain_1","route","_b","_c","segment","param","params","slice","push","removePrefix","prefix","i","readSegments","loc","pathname","hash","qsStart","indexOf","substring","split","map","trim","printRoutes","routes","console","group","concat","forEach","r","apply","ids","id","debug","routes_1","groupEnd","printRedirects","redirects","redirects_1","redirect","to","from","writeNavState","index","changed","animation","outlet_1","searchNavNode","Promise","resolve","componentOnReady","sent","setRouteId","result","element","markVisible","error","e_1","readNavState","__awaiter","node","outlet","getRouteId","waitUntilNavNode","document","body","window","addEventListener","once","OUTLET_SELECTOR","matches","querySelector","matchesRedirect","expected","findRouteRedirect","find","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","Object","keys","pathWithParams","key","j","matchesSegments","inputSegments","RouterSegments","matchesDefault","allparams","chainSegments","chainSegments_1","data","next","mergeParams","beforeEnter","beforeLeave","a","b","assign","findChainForIDs","chains","match","maxMatches","chains_1","_a","findChainForSegments","bestScore","chains_2","matchedChain","computePriority","level","chain_2","pow","this","prototype","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","component","componentProps","nodes","nodes_1","flattenNode","child","Router","class_1","hostRef","previousPath","busy","lastState","componentWillLoad","runGuards","getSegments","canProceed","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","historyDirection","onBackButton","ev","_this","detail","register","processNextHandler","back","canTransition","startsWith","currentPath","URL","search","parsedPath","waitPromise","printDebug","navChanged","warn","safeWriteNavState","win","title","location","href","redirectFrom","toSegments","lock","unlock","e_2","p","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","ionRouteWillChange","emit","ionRouteDidChange","redirectFromSegments","redirectedFrom"],"sources":["node_modules/@ionic/core/dist/collection/components/router/utils/constants.js","node_modules/@ionic/core/dist/collection/components/router/utils/path.js","node_modules/@ionic/core/dist/collection/components/router/utils/debug.js","node_modules/@ionic/core/dist/collection/components/router/utils/dom.js","node_modules/@ionic/core/dist/collection/components/router/utils/matching.js","node_modules/@ionic/core/dist/collection/components/router/utils/parser.js","node_modules/@ionic/core/dist/collection/components/router/router.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport const ROUTER_INTENT_NONE = 'root';\nexport const ROUTER_INTENT_FORWARD = 'forward';\nexport const ROUTER_INTENT_BACK = 'back';\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { ROUTER_INTENT_FORWARD } from './constants';\n/** Join the non empty segments with \"/\". */\nexport const generatePath = (segments) => {\n  const path = segments.filter((s) => s.length > 0).join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nexport const writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nexport const chainToSegments = (chain) => {\n  const segments = [];\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        segments.push(param);\n      }\n      else if (segment !== '') {\n        segments.push(segment);\n      }\n    }\n  }\n  return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n  if (prefix.length > segments.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return segments;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== segments[i]) {\n      return null;\n    }\n  }\n  if (segments.length === prefix.length) {\n    return [''];\n  }\n  return segments.slice(prefix.length);\n};\nexport const readSegments = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const segments = parsePath(pathname).segments;\n  return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nexport const parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substring(qsStart + 1);\n      path = path.substring(0, qsStart);\n    }\n    segments = path\n      .split('/')\n      .map((s) => s.trim())\n      .filter((s) => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { generatePath } from './path';\nexport const printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const segments = [];\n    chain.forEach((r) => segments.push(...r.segments));\n    const ids = chain.map((r) => r.id);\n    console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nexport const printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { componentOnReady } from '../../../utils/helpers';\nimport { ROUTER_INTENT_NONE } from './constants';\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nexport const writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise((resolve) => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nexport const readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // eslint-disable-next-line no-cond-assign\n  while ((outlet = searchNavNode(node))) {\n    const id = await outlet.getRouteId();\n    if (id) {\n      node = id.element;\n      id.element = undefined;\n      ids.push(id);\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nexport const waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise((resolve) => {\n    window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n  });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(OUTLET_SELECTOR)) {\n    return root;\n  }\n  const outlet = root.querySelector(OUTLET_SELECTOR);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nexport const matchesRedirect = (segments, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > segments.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== segments[i]) {\n      return false;\n    }\n  }\n  return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nexport const findRouteRedirect = (segments, redirects) => {\n  return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nexport const matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      // Only compare routes with the chain that have the same number of parameters.\n      if (routeIdParams.length === routeChain.segments.length) {\n        // Maps the route's params into a path based on the path variable names,\n        // to compare against the route chain format.\n        //\n        // Before:\n        // ```ts\n        // {\n        //  params: {\n        //    s1: 'a',\n        //    s2: 'b'\n        //  }\n        // }\n        // ```\n        //\n        // After:\n        // ```ts\n        // [':s1',':s2']\n        // ```\n        //\n        const pathWithParams = routeIdParams.map((key) => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nexport const matchesSegments = (segments, chain) => {\n  const inputSegments = new RouterSegments(segments);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const chainSegments = chain[i].segments;\n    if (chainSegments[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of chainSegments) {\n        const data = inputSegments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      segments: route.segments,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave,\n    }));\n  }\n  return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nexport const mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nexport const findChainForIDs = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => {\n      var _a;\n      return ({\n        id: route.id,\n        segments: route.segments,\n        params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n      });\n    });\n  }\n  return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nexport const findChainForSegments = (segments, chains) => {\n  let match = null;\n  let bestScore = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesSegments(segments, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > bestScore) {\n        bestScore = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nexport const computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (segment !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nexport class RouterSegments {\n  constructor(segments) {\n    this.segments = segments.slice();\n  }\n  next() {\n    if (this.segments.length > 0) {\n      return this.segments.shift();\n    }\n    return '';\n  }\n}\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { parsePath } from './path';\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nexport const readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map((el) => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nexport const readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nexport const readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n    .map((el) => {\n    const component = readProp(el, 'component');\n    return {\n      segments: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el),\n    };\n  });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nexport const flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n  chain = [\n    ...chain,\n    {\n      id: node.id,\n      segments: node.segments,\n      params: node.params,\n      beforeLeave: node.beforeLeave,\n      beforeEnter: node.beforeEnter,\n    },\n  ];\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n","import { debounce } from '../../utils/helpers';\nimport { ROUTER_INTENT_BACK, ROUTER_INTENT_FORWARD, ROUTER_INTENT_NONE } from './utils/constants';\nimport { printRedirects, printRoutes } from './utils/debug';\nimport { readNavState, waitUntilNavNode, writeNavState } from './utils/dom';\nimport { findChainForIDs, findChainForSegments, findRouteRedirect } from './utils/matching';\nimport { readRedirects, readRoutes } from './utils/parser';\nimport { chainToSegments, generatePath, parsePath, readSegments, writeSegments } from './utils/path';\nexport class Router {\n  constructor() {\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getSegments());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getSegments();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, (processNextHandler) => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified path.\n   *\n   * @param path The path to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(path, direction = 'forward', animation) {\n    var _a;\n    if (path.startsWith('.')) {\n      const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n      // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n      const url = new URL(path, `https://host/${currentPath}`);\n      path = url.pathname + url.search;\n    }\n    let parsedPath = parsePath(path);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /** Go back to previous page in the window.history. */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = findChainForIDs(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map((i) => i.id));\n      return false;\n    }\n    const segments = chainToSegments(chain);\n    if (!segments) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setSegments(segments, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n    return true;\n  }\n  /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n  onRedirectChanged() {\n    const segments = this.getSegments();\n    if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n      this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n    }\n  }\n  /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(segments, direction, animation) {\n    if (!segments) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(segments, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments: toSegments, queryString } = redirect.to;\n      this.setSegments(toSegments, direction, queryString);\n      redirectFrom = redirect.from;\n      segments = toSegments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = findChainForSegments(segments, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise((r) => (resolve = r));\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  /**\n   * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n   *\n   * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n   * Otherwise the beforeEnterHook hook of the target route is executed.\n   */\n  async runGuards(to = this.getSegments(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = findChainForSegments(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = findChainForSegments(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setSegments(segments, direction, queryString) {\n    this.state++;\n    writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n  }\n  getSegments() {\n    return readSegments(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(toSegments, redirectFromSegments) {\n    const from = this.previousPath;\n    const to = generatePath(toSegments);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  static get is() { return \"ion-router\"; }\n  static get properties() {\n    return {\n      \"root\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The root path to use when matching URLs. By default, this is set to \\\"/\\\", but you can specify\\nan alternate prefix for all URL paths.\"\n        },\n        \"attribute\": \"root\",\n        \"reflect\": false,\n        \"defaultValue\": \"'/'\"\n      },\n      \"useHash\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The router can work in two \\\"modes\\\":\\n- With hash: `/index.html#/path/to/page`\\n- Without hash: `/path/to/page`\\n\\nUsing one or another might depend in the requirements of your app and/or where it's deployed.\\n\\nUsually \\\"hash-less\\\" navigation works better for SEO and it's more user friendly too, but it might\\nrequires additional server-side configuration in order to properly work.\\n\\nOn the other side hash-navigation is much easier to deploy, it even works over the file protocol.\\n\\nBy default, this property is `true`, change to `false` to allow hash-less URLs.\"\n        },\n        \"attribute\": \"use-hash\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      }\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionRouteWillChange\",\n        \"name\": \"ionRouteWillChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Event emitted when the route is about to change\"\n        },\n        \"complexType\": {\n          \"original\": \"RouterEventDetail\",\n          \"resolved\": \"RouterEventDetail\",\n          \"references\": {\n            \"RouterEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionRouteDidChange\",\n        \"name\": \"ionRouteDidChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the route had changed\"\n        },\n        \"complexType\": {\n          \"original\": \"RouterEventDetail\",\n          \"resolved\": \"RouterEventDetail\",\n          \"references\": {\n            \"RouterEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"canTransition\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<string | boolean>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<string | boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      },\n      \"push\": {\n        \"complexType\": {\n          \"signature\": \"(path: string, direction?: RouterDirection, animation?: AnimationBuilder) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"path The path to navigate to.\"\n                }],\n              \"text\": \"The path to navigate to.\"\n            }, {\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"direction The direction of the animation. Defaults to `\\\"forward\\\"`.\"\n                }],\n              \"text\": \"The direction of the animation. Defaults to `\\\"forward\\\"`.\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"RouterDirection\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            },\n            \"AnimationBuilder\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Navigate to the specified path.\",\n          \"tags\": [{\n              \"name\": \"param\",\n              \"text\": \"path The path to navigate to.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"direction The direction of the animation. Defaults to `\\\"forward\\\"`.\"\n            }]\n        }\n      },\n      \"back\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Go back to previous page in the window.history.\",\n          \"tags\": []\n        }\n      },\n      \"printDebug\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      },\n      \"navChanged\": {\n        \"complexType\": {\n          \"signature\": \"(direction: RouterDirection) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"RouterDirection\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get listeners() {\n    return [{\n        \"name\": \"popstate\",\n        \"method\": \"onPopState\",\n        \"target\": \"window\",\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"ionBackButton\",\n        \"method\": \"onBackButton\",\n        \"target\": \"document\",\n        \"capture\": false,\n        \"passive\": false\n      }];\n  }\n}\n"],"mappings":"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"}