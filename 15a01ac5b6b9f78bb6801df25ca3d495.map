{"version":3,"names":["inputIosCss","inputMdCss","Input","class_1","hostRef","_this","this","inputId","concat","inputIds","didBlurAfterEdit","inheritedAttributes","isComposing","fireFocusEvents","hasFocus","autocapitalize","autocomplete","autocorrect","autofocus","clearInput","debounce","disabled","name","readonly","required","spellcheck","type","value","onInput","ev","input","target","ionInput","emit","onBlur","focusChanged","emitStyle","ionBlur","onFocus","ionFocus","onKeydown","shouldClearOnEdit","hasValue","key","clearTextInput","onCompositionStart","onCompositionEnd","preventDefault","stopPropagation","setFocus","nativeInput","prototype","debounceChanged","ionChange","debounceEvent","disabledChanged","placeholderChanged","valueChanged","getValue","toString","componentWillLoad","Object","assign","inheritAriaAttributes","el","inheritAttributes","connectedCallback","document","dispatchEvent","CustomEvent","detail","componentDidLoad","addEventListener","disconnectedCallback","removeEventListener","focus","setBlur","blur","getInputElement","Promise","resolve","_a","clearOnEdit","undefined","ionStyle","interactive","placeholder","length","render","mode","getIonMode","labelId","label","findItemLabel","id","h","Host","class","createColorClasses","color","hostContext","ref","accept","autoCapitalize","autoComplete","autoCorrect","autoFocus","enterKeyHint","enterkeyhint","inputMode","inputmode","min","max","minLength","minlength","maxLength","maxlength","multiple","pattern","readOnly","step","size","onKeyDown","onPointerDown","onClick","icon","closeCircle","closeSharp"],"sources":["node_modules/@ionic/core/dist/collection/components/input/input.ios.css?tag=ion-input&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/input/input.md.css?tag=ion-input&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/input/input.js"],"sourcesContent":[":host {\n  /**\n   * @prop --background: Background of the input\n   *\n   * @prop --color: Color of the input text\n   *\n   * @prop --padding-top: Top padding of the input\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input\n   * @prop --padding-bottom: Bottom padding of the input\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input\n   *\n   * @prop --placeholder-color: Color of the input placeholder text\n   * @prop --placeholder-font-style: Font style of the input placeholder text\n   * @prop --placeholder-font-weight: Font weight of the input placeholder text\n   * @prop --placeholder-opacity: Opacity of the input placeholder text\n   */\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: .5;\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --background: transparent;\n  --color: initial;\n  display: flex;\n  position: relative;\n  flex: 1;\n  align-items: center;\n  width: 100%;\n  /* stylelint-disable-next-line all */\n  padding: 0 !important;\n  background: var(--background);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n}\n\n:host-context(ion-item:not(.item-label)) {\n  --padding-start: 0;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n.native-input {\n  border-radius: var(--border-radius);\n  padding-left: var(--padding-start);\n  padding-right: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: inline-block;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  box-sizing: border-box;\n  appearance: none;\n}\n@supports (margin-inline-start: 0) or (-webkit-margin-start: 0) {\n  .native-input {\n    padding-left: unset;\n    padding-right: unset;\n    -webkit-padding-start: var(--padding-start);\n    padding-inline-start: var(--padding-start);\n    -webkit-padding-end: var(--padding-end);\n    padding-inline-end: var(--padding-end);\n  }\n}\n.native-input::placeholder {\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n.native-input:-webkit-autofill {\n  background-color: transparent;\n}\n.native-input:invalid {\n  box-shadow: none;\n}\n.native-input::-ms-clear {\n  display: none;\n}\n\n.native-input[disabled]:not(.cloned-input) {\n  opacity: 0.4;\n}\n\n.cloned-input {\n  left: 0;\n  top: 0;\n  position: absolute;\n  pointer-events: none;\n}\n[dir=rtl] .cloned-input, :host-context([dir=rtl]) .cloned-input {\n  left: unset;\n  right: unset;\n  right: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n.input-clear-icon {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  background-position: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border: 0;\n  outline: none;\n  background-color: transparent;\n  background-repeat: no-repeat;\n  color: var(--ion-color-step-600, #666666);\n  visibility: hidden;\n  appearance: none;\n}\n\n:host(.in-item-color) .input-clear-icon {\n  color: inherit;\n}\n\n/**\n * Normally, we would not want to use :focus\n * here because that would mean tapping the button\n * on mobile would focus it (and keep it focused).\n * However, the clear button always disappears after\n * being activated, so we never get to that state.\n */\n.input-clear-icon:focus {\n  opacity: 0.5;\n}\n\n:host(.has-value) .input-clear-icon {\n  visibility: visible;\n}\n\n:host(.has-focus) {\n  pointer-events: none;\n}\n\n:host(.has-focus) input,\n:host(.has-focus) a,\n:host(.has-focus) button {\n  pointer-events: auto;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value)) {\n  opacity: 0;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value).item-has-focus) {\n  transition: opacity 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n  opacity: 1;\n}\n\n:host {\n  --padding-top: 10px;\n  --padding-end: 10px;\n  --padding-bottom: 10px;\n  --padding-start: 0;\n  font-size: inherit;\n}\n\n:host-context(.item-label-stacked),\n:host-context(.item-label-floating) {\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  --padding-start: 0px;\n}\n\n.input-clear-icon ion-icon {\n  width: 18px;\n  height: 18px;\n}",":host {\n  /**\n   * @prop --background: Background of the input\n   *\n   * @prop --color: Color of the input text\n   *\n   * @prop --padding-top: Top padding of the input\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input\n   * @prop --padding-bottom: Bottom padding of the input\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input\n   *\n   * @prop --placeholder-color: Color of the input placeholder text\n   * @prop --placeholder-font-style: Font style of the input placeholder text\n   * @prop --placeholder-font-weight: Font weight of the input placeholder text\n   * @prop --placeholder-opacity: Opacity of the input placeholder text\n   */\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: .5;\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --background: transparent;\n  --color: initial;\n  display: flex;\n  position: relative;\n  flex: 1;\n  align-items: center;\n  width: 100%;\n  /* stylelint-disable-next-line all */\n  padding: 0 !important;\n  background: var(--background);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n}\n\n:host-context(ion-item:not(.item-label)) {\n  --padding-start: 0;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n.native-input {\n  border-radius: var(--border-radius);\n  padding-left: var(--padding-start);\n  padding-right: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: inline-block;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  box-sizing: border-box;\n  appearance: none;\n}\n@supports (margin-inline-start: 0) or (-webkit-margin-start: 0) {\n  .native-input {\n    padding-left: unset;\n    padding-right: unset;\n    -webkit-padding-start: var(--padding-start);\n    padding-inline-start: var(--padding-start);\n    -webkit-padding-end: var(--padding-end);\n    padding-inline-end: var(--padding-end);\n  }\n}\n.native-input::placeholder {\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n.native-input:-webkit-autofill {\n  background-color: transparent;\n}\n.native-input:invalid {\n  box-shadow: none;\n}\n.native-input::-ms-clear {\n  display: none;\n}\n\n.native-input[disabled]:not(.cloned-input) {\n  opacity: 0.4;\n}\n\n.cloned-input {\n  left: 0;\n  top: 0;\n  position: absolute;\n  pointer-events: none;\n}\n[dir=rtl] .cloned-input, :host-context([dir=rtl]) .cloned-input {\n  left: unset;\n  right: unset;\n  right: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n.input-clear-icon {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  background-position: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border: 0;\n  outline: none;\n  background-color: transparent;\n  background-repeat: no-repeat;\n  color: var(--ion-color-step-600, #666666);\n  visibility: hidden;\n  appearance: none;\n}\n\n:host(.in-item-color) .input-clear-icon {\n  color: inherit;\n}\n\n/**\n * Normally, we would not want to use :focus\n * here because that would mean tapping the button\n * on mobile would focus it (and keep it focused).\n * However, the clear button always disappears after\n * being activated, so we never get to that state.\n */\n.input-clear-icon:focus {\n  opacity: 0.5;\n}\n\n:host(.has-value) .input-clear-icon {\n  visibility: visible;\n}\n\n:host(.has-focus) {\n  pointer-events: none;\n}\n\n:host(.has-focus) input,\n:host(.has-focus) a,\n:host(.has-focus) button {\n  pointer-events: auto;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value)) {\n  opacity: 0;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value).item-has-focus) {\n  transition: opacity 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n  opacity: 1;\n}\n\n:host {\n  --padding-top: 10px;\n  --padding-end: 0;\n  --padding-bottom: 10px;\n  --padding-start: 8px;\n  font-size: inherit;\n}\n\n:host-context(.item-label-stacked),\n:host-context(.item-label-floating) {\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  --padding-start: 0;\n}\n\n.input-clear-icon ion-icon {\n  width: 22px;\n  height: 22px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, h } from '@stencil/core';\nimport { closeCircle, closeSharp } from 'ionicons/icons';\nimport { getIonMode } from '../../global/ionic-global';\nimport { inheritAriaAttributes, debounceEvent, findItemLabel, inheritAttributes } from '../../utils/helpers';\nimport { createColorClasses, hostContext } from '../../utils/theme';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Input {\n  constructor() {\n    this.inputId = `ion-input-${inputIds++}`;\n    this.didBlurAfterEdit = false;\n    this.inheritedAttributes = {};\n    this.isComposing = false;\n    /**\n     * This is required for a WebKit bug which requires us to\n     * blur and focus an input to properly focus the input in\n     * an item with delegatesFocus. It will no longer be needed\n     * with iOS 14.\n     *\n     * @internal\n     */\n    this.fireFocusEvents = true;\n    this.hasFocus = false;\n    /**\n     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n     * Available options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.\n     */\n    this.autocapitalize = 'off';\n    /**\n     * Indicates whether the value of the control can be automatically completed by the browser.\n     */\n    this.autocomplete = 'off';\n    /**\n     * Whether auto correction should be enabled when the user is entering/editing the text value.\n     */\n    this.autocorrect = 'off';\n    /**\n     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n     */\n    this.autofocus = false;\n    /**\n     * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n     */\n    this.clearInput = false;\n    /**\n     * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.\n     */\n    this.debounce = 0;\n    /**\n     * If `true`, the user cannot interact with the input.\n     */\n    this.disabled = false;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n    this.name = this.inputId;\n    /**\n     * If `true`, the user cannot modify the value.\n     */\n    this.readonly = false;\n    /**\n     * If `true`, the user must fill in a value before submitting a form.\n     */\n    this.required = false;\n    /**\n     * If `true`, the element will have its spelling and grammar checked.\n     */\n    this.spellcheck = false;\n    /**\n     * The type of control to display. The default type is text.\n     */\n    this.type = 'text';\n    /**\n     * The value of the input.\n     */\n    this.value = '';\n    this.onInput = (ev) => {\n      const input = ev.target;\n      if (input) {\n        this.value = input.value || '';\n      }\n      this.ionInput.emit(ev);\n    };\n    this.onBlur = (ev) => {\n      this.hasFocus = false;\n      this.focusChanged();\n      this.emitStyle();\n      if (this.fireFocusEvents) {\n        this.ionBlur.emit(ev);\n      }\n    };\n    this.onFocus = (ev) => {\n      this.hasFocus = true;\n      this.focusChanged();\n      this.emitStyle();\n      if (this.fireFocusEvents) {\n        this.ionFocus.emit(ev);\n      }\n    };\n    this.onKeydown = (ev) => {\n      if (this.shouldClearOnEdit()) {\n        // Did the input value change after it was blurred and edited?\n        // Do not clear if user is hitting Enter to submit form\n        if (this.didBlurAfterEdit && this.hasValue() && ev.key !== 'Enter') {\n          // Clear the input\n          this.clearTextInput();\n        }\n        // Reset the flag\n        this.didBlurAfterEdit = false;\n      }\n    };\n    this.onCompositionStart = () => {\n      this.isComposing = true;\n    };\n    this.onCompositionEnd = () => {\n      this.isComposing = false;\n    };\n    this.clearTextInput = (ev) => {\n      if (this.clearInput && !this.readonly && !this.disabled && ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        // Attempt to focus input again after pressing clear button\n        this.setFocus();\n      }\n      this.value = '';\n      /**\n       * This is needed for clearOnEdit\n       * Otherwise the value will not be cleared\n       * if user is inside the input\n       */\n      if (this.nativeInput) {\n        this.nativeInput.value = '';\n      }\n    };\n  }\n  debounceChanged() {\n    this.ionChange = debounceEvent(this.ionChange, this.debounce);\n  }\n  disabledChanged() {\n    this.emitStyle();\n  }\n  /**\n   * Update the item classes when the placeholder changes\n   */\n  placeholderChanged() {\n    this.emitStyle();\n  }\n  /**\n   * Update the native input element when the value changes\n   */\n  valueChanged() {\n    const nativeInput = this.nativeInput;\n    const value = this.getValue();\n    if (nativeInput && nativeInput.value !== value && !this.isComposing) {\n      /**\n       * Assigning the native input's value on attribute\n       * value change, allows `ionInput` implementations\n       * to override the control's value.\n       *\n       * Used for patterns such as input trimming (removing whitespace),\n       * or input masking.\n       */\n      nativeInput.value = value;\n    }\n    this.emitStyle();\n    this.ionChange.emit({ value: this.value == null ? this.value : this.value.toString() });\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, ['tabindex', 'title', 'data-form-type']));\n  }\n  connectedCallback() {\n    this.emitStyle();\n    this.debounceChanged();\n    if (Build.isBrowser) {\n      document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n        detail: this.el,\n      }));\n    }\n  }\n  componentDidLoad() {\n    const nativeInput = this.nativeInput;\n    if (nativeInput) {\n      // TODO: FW-729 Update to JSX bindings when Stencil resolves bug with:\n      // https://github.com/ionic-team/stencil/issues/3235\n      nativeInput.addEventListener('compositionstart', this.onCompositionStart);\n      nativeInput.addEventListener('compositionend', this.onCompositionEnd);\n    }\n  }\n  disconnectedCallback() {\n    if (Build.isBrowser) {\n      document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n        detail: this.el,\n      }));\n    }\n    const nativeInput = this.nativeInput;\n    if (nativeInput) {\n      nativeInput.removeEventListener('compositionstart', this.onCompositionStart);\n      nativeInput.removeEventListener('compositionEnd', this.onCompositionEnd);\n    }\n  }\n  /**\n   * Sets focus on the native `input` in `ion-input`. Use this method instead of the global\n   * `input.focus()`.\n   *\n   * Developers who wish to focus an input when a page enters\n   * should call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\n   */\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n  /**\n   * Sets blur on the native `input` in `ion-input`. Use this method instead of the global\n   * `input.blur()`.\n   * @internal\n   */\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n    }\n  }\n  /**\n   * Returns the native `<input>` element used under the hood.\n   */\n  getInputElement() {\n    return Promise.resolve(this.nativeInput);\n  }\n  shouldClearOnEdit() {\n    const { type, clearOnEdit } = this;\n    return clearOnEdit === undefined ? type === 'password' : clearOnEdit;\n  }\n  getValue() {\n    return typeof this.value === 'number' ? this.value.toString() : (this.value || '').toString();\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      interactive: true,\n      input: true,\n      'has-placeholder': this.placeholder !== undefined,\n      'has-value': this.hasValue(),\n      'has-focus': this.hasFocus,\n      'interactive-disabled': this.disabled,\n    });\n  }\n  focusChanged() {\n    // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n    if (!this.hasFocus && this.shouldClearOnEdit() && this.hasValue()) {\n      this.didBlurAfterEdit = true;\n    }\n  }\n  hasValue() {\n    return this.getValue().length > 0;\n  }\n  render() {\n    const mode = getIonMode(this);\n    const value = this.getValue();\n    const labelId = this.inputId + '-lbl';\n    const label = findItemLabel(this.el);\n    if (label) {\n      label.id = labelId;\n    }\n    return (h(Host, { \"aria-disabled\": this.disabled ? 'true' : null, class: createColorClasses(this.color, {\n        [mode]: true,\n        'has-value': this.hasValue(),\n        'has-focus': this.hasFocus,\n        'in-item-color': hostContext('ion-item.ion-color', this.el),\n      }) }, h(\"input\", Object.assign({ class: \"native-input\", ref: (input) => (this.nativeInput = input), \"aria-labelledby\": label ? labelId : null, disabled: this.disabled, accept: this.accept, autoCapitalize: this.autocapitalize, autoComplete: this.autocomplete, autoCorrect: this.autocorrect, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, multiple: this.multiple, name: this.name, pattern: this.pattern, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck, step: this.step, size: this.size, type: this.type, value: value, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeydown }, this.inheritedAttributes)), this.clearInput && !this.readonly && !this.disabled && (h(\"button\", { \"aria-label\": \"reset\", type: \"button\", class: \"input-clear-icon\", onPointerDown: (ev) => {\n        /**\n         * This prevents mobile browsers from\n         * blurring the input when the clear\n         * button is activated.\n         */\n        ev.preventDefault();\n      }, onClick: this.clearTextInput }, h(\"ion-icon\", { \"aria-hidden\": \"true\", icon: mode === 'ios' ? closeCircle : closeSharp })))));\n  }\n  static get is() { return \"ion-input\"; }\n  static get encapsulation() { return \"scoped\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"input.ios.scss\"],\n      \"md\": [\"input.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"input.ios.css\"],\n      \"md\": [\"input.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"fireFocusEvents\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"This is required for a WebKit bug which requires us to\\nblur and focus an input to properly focus the input in\\nan item with delegatesFocus. It will no longer be needed\\nwith iOS 14.\"\n        },\n        \"attribute\": \"fire-focus-events\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"accept\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"deprecated\",\n              \"text\": undefined\n            }],\n          \"text\": \"This attribute is ignored.\"\n        },\n        \"attribute\": \"accept\",\n        \"reflect\": false\n      },\n      \"autocapitalize\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\\nAvailable options: `\\\"off\\\"`, `\\\"none\\\"`, `\\\"on\\\"`, `\\\"sentences\\\"`, `\\\"words\\\"`, `\\\"characters\\\"`.\"\n        },\n        \"attribute\": \"autocapitalize\",\n        \"reflect\": false,\n        \"defaultValue\": \"'off'\"\n      },\n      \"autocomplete\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AutocompleteTypes\",\n          \"resolved\": \"\\\"name\\\" | \\\"email\\\" | \\\"tel\\\" | \\\"url\\\" | \\\"on\\\" | \\\"off\\\" | \\\"honorific-prefix\\\" | \\\"given-name\\\" | \\\"additional-name\\\" | \\\"family-name\\\" | \\\"honorific-suffix\\\" | \\\"nickname\\\" | \\\"username\\\" | \\\"new-password\\\" | \\\"current-password\\\" | \\\"one-time-code\\\" | \\\"organization-title\\\" | \\\"organization\\\" | \\\"street-address\\\" | \\\"address-line1\\\" | \\\"address-line2\\\" | \\\"address-line3\\\" | \\\"address-level4\\\" | \\\"address-level3\\\" | \\\"address-level2\\\" | \\\"address-level1\\\" | \\\"country\\\" | \\\"country-name\\\" | \\\"postal-code\\\" | \\\"cc-name\\\" | \\\"cc-given-name\\\" | \\\"cc-additional-name\\\" | \\\"cc-family-name\\\" | \\\"cc-number\\\" | \\\"cc-exp\\\" | \\\"cc-exp-month\\\" | \\\"cc-exp-year\\\" | \\\"cc-csc\\\" | \\\"cc-type\\\" | \\\"transaction-currency\\\" | \\\"transaction-amount\\\" | \\\"language\\\" | \\\"bday\\\" | \\\"bday-day\\\" | \\\"bday-month\\\" | \\\"bday-year\\\" | \\\"sex\\\" | \\\"tel-country-code\\\" | \\\"tel-national\\\" | \\\"tel-area-code\\\" | \\\"tel-local\\\" | \\\"tel-extension\\\" | \\\"impp\\\" | \\\"photo\\\"\",\n          \"references\": {\n            \"AutocompleteTypes\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Indicates whether the value of the control can be automatically completed by the browser.\"\n        },\n        \"attribute\": \"autocomplete\",\n        \"reflect\": false,\n        \"defaultValue\": \"'off'\"\n      },\n      \"autocorrect\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'on' | 'off'\",\n          \"resolved\": \"\\\"off\\\" | \\\"on\\\"\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Whether auto correction should be enabled when the user is entering/editing the text value.\"\n        },\n        \"attribute\": \"autocorrect\",\n        \"reflect\": false,\n        \"defaultValue\": \"'off'\"\n      },\n      \"autofocus\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"This Boolean attribute lets you specify that a form control should have input focus when the page loads.\"\n        },\n        \"attribute\": \"autofocus\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"clearInput\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\"\n        },\n        \"attribute\": \"clear-input\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"clearOnEdit\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\\\"password\\\"`, `false` for all other types.\"\n        },\n        \"attribute\": \"clear-on-edit\",\n        \"reflect\": false\n      },\n      \"debounce\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.\"\n        },\n        \"attribute\": \"debounce\",\n        \"reflect\": false,\n        \"defaultValue\": \"0\"\n      },\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot interact with the input.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"enterkeyhint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'\",\n          \"resolved\": \"\\\"done\\\" | \\\"enter\\\" | \\\"go\\\" | \\\"next\\\" | \\\"previous\\\" | \\\"search\\\" | \\\"send\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A hint to the browser for which enter key to display.\\nPossible values: `\\\"enter\\\"`, `\\\"done\\\"`, `\\\"go\\\"`, `\\\"next\\\"`,\\n`\\\"previous\\\"`, `\\\"search\\\"`, and `\\\"send\\\"`.\"\n        },\n        \"attribute\": \"enterkeyhint\",\n        \"reflect\": false\n      },\n      \"inputmode\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'\",\n          \"resolved\": \"\\\"decimal\\\" | \\\"email\\\" | \\\"none\\\" | \\\"numeric\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"url\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A hint to the browser for which keyboard to display.\\nPossible values: `\\\"none\\\"`, `\\\"text\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`,\\n`\\\"email\\\"`, `\\\"numeric\\\"`, `\\\"decimal\\\"`, and `\\\"search\\\"`.\"\n        },\n        \"attribute\": \"inputmode\",\n        \"reflect\": false\n      },\n      \"max\": {\n        \"type\": \"any\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | number\",\n          \"resolved\": \"number | string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The maximum value, which must not be less than its minimum (min attribute) value.\"\n        },\n        \"attribute\": \"max\",\n        \"reflect\": false\n      },\n      \"maxlength\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.\"\n        },\n        \"attribute\": \"maxlength\",\n        \"reflect\": false\n      },\n      \"min\": {\n        \"type\": \"any\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | number\",\n          \"resolved\": \"number | string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The minimum value, which must not be greater than its maximum (max attribute) value.\"\n        },\n        \"attribute\": \"min\",\n        \"reflect\": false\n      },\n      \"minlength\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.\"\n        },\n        \"attribute\": \"minlength\",\n        \"reflect\": false\n      },\n      \"multiple\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `\\\"email\\\"`, otherwise it is ignored.\"\n        },\n        \"attribute\": \"multiple\",\n        \"reflect\": false\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The name of the control, which is submitted with the form data.\"\n        },\n        \"attribute\": \"name\",\n        \"reflect\": false,\n        \"defaultValue\": \"this.inputId\"\n      },\n      \"pattern\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `\\\"text\\\"`, `\\\"search\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`, `\\\"email\\\"`, `\\\"date\\\"`, or `\\\"password\\\"`, otherwise it is ignored. When the type attribute is `\\\"date\\\"`, `pattern` will only be used in browsers that do not support the `\\\"date\\\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.\"\n        },\n        \"attribute\": \"pattern\",\n        \"reflect\": false\n      },\n      \"placeholder\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Instructional text that shows before the input has a value.\\nThis property applies only when the `type` property is set to `\\\"email\\\"`,\\n`\\\"number\\\"`, `\\\"password\\\"`, `\\\"search\\\"`, `\\\"tel\\\"`, `\\\"text\\\"`, or `\\\"url\\\"`, otherwise it is ignored.\"\n        },\n        \"attribute\": \"placeholder\",\n        \"reflect\": false\n      },\n      \"readonly\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot modify the value.\"\n        },\n        \"attribute\": \"readonly\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"required\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user must fill in a value before submitting a form.\"\n        },\n        \"attribute\": \"required\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"spellcheck\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the element will have its spelling and grammar checked.\"\n        },\n        \"attribute\": \"spellcheck\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"step\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Works with the min and max attributes to limit the increments at which a value can be set.\\nPossible values are: `\\\"any\\\"` or a positive floating point number.\"\n        },\n        \"attribute\": \"step\",\n        \"reflect\": false\n      },\n      \"size\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The initial size of the control. This value is in pixels unless the value of the type attribute is `\\\"text\\\"` or `\\\"password\\\"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `\\\"text\\\"`, `\\\"search\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`, `\\\"email\\\"`, or `\\\"password\\\"`, otherwise it is ignored.\"\n        },\n        \"attribute\": \"size\",\n        \"reflect\": false\n      },\n      \"type\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"TextFieldTypes\",\n          \"resolved\": \"\\\"date\\\" | \\\"datetime-local\\\" | \\\"email\\\" | \\\"month\\\" | \\\"number\\\" | \\\"password\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"time\\\" | \\\"url\\\" | \\\"week\\\"\",\n          \"references\": {\n            \"TextFieldTypes\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The type of control to display. The default type is text.\"\n        },\n        \"attribute\": \"type\",\n        \"reflect\": false,\n        \"defaultValue\": \"'text'\"\n      },\n      \"value\": {\n        \"type\": \"any\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"string | number | null\",\n          \"resolved\": \"null | number | string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The value of the input.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false,\n        \"defaultValue\": \"''\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"hasFocus\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionInput\",\n        \"name\": \"ionInput\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when a keyboard input occurred.\"\n        },\n        \"complexType\": {\n          \"original\": \"InputEvent\",\n          \"resolved\": \"InputEvent\",\n          \"references\": {\n            \"InputEvent\": {\n              \"location\": \"global\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionChange\",\n        \"name\": \"ionChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the value has changed.\"\n        },\n        \"complexType\": {\n          \"original\": \"InputChangeEventDetail\",\n          \"resolved\": \"InputChangeEventDetail\",\n          \"references\": {\n            \"InputChangeEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionBlur\",\n        \"name\": \"ionBlur\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the input loses focus.\"\n        },\n        \"complexType\": {\n          \"original\": \"FocusEvent\",\n          \"resolved\": \"FocusEvent\",\n          \"references\": {\n            \"FocusEvent\": {\n              \"location\": \"global\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionFocus\",\n        \"name\": \"ionFocus\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the input has focus.\"\n        },\n        \"complexType\": {\n          \"original\": \"FocusEvent\",\n          \"resolved\": \"FocusEvent\",\n          \"references\": {\n            \"FocusEvent\": {\n              \"location\": \"global\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionStyle\",\n        \"name\": \"ionStyle\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"Emitted when the styles change.\"\n        },\n        \"complexType\": {\n          \"original\": \"StyleEventDetail\",\n          \"resolved\": \"StyleEventDetail\",\n          \"references\": {\n            \"StyleEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"setFocus\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Sets focus on the native `input` in `ion-input`. Use this method instead of the global\\n`input.focus()`.\\n\\nDevelopers who wish to focus an input when a page enters\\nshould call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\",\n          \"tags\": []\n        }\n      },\n      \"setBlur\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Sets blur on the native `input` in `ion-input`. Use this method instead of the global\\n`input.blur()`.\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      },\n      \"getInputElement\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<HTMLInputElement>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"HTMLInputElement\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<HTMLInputElement>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns the native `<input>` element used under the hood.\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"debounce\",\n        \"methodName\": \"debounceChanged\"\n      }, {\n        \"propName\": \"disabled\",\n        \"methodName\": \"disabledChanged\"\n      }, {\n        \"propName\": \"placeholder\",\n        \"methodName\": \"placeholderChanged\"\n      }, {\n        \"propName\": \"value\",\n        \"methodName\": \"valueChanged\"\n      }];\n  }\n}\nlet inputIds = 0;\n"],"mappings":"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"}